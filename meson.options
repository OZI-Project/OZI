# meson.options
# Part of the OZI Project, under the Apache License v2.0 with LLVM Exceptions.
# See LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
option(
    'ozi-blastpipe',
    type: 'feature',
    value: 'disabled',
    description: 'blastpipe integration tests package',
)
option('dev', type: 'feature', value: 'auto')
option('source-to-build', type: 'feature', value: 'auto')
option('build-dir', type: 'feature', value: 'auto')
option('project-name', type: 'feature', value: 'auto')
option('docs-source', type: 'feature', value: 'disabled')
option('test-source', type: 'feature', value: 'auto')
option('dist', type: 'feature', value: 'auto')
option('docs', type: 'feature', value: 'auto')
option('lint', type: 'feature', value: 'auto')
option('test', type: 'feature', value: 'auto')
option(
    'python-dependencies',
    type: 'array',
    description: 'sanity check module dependencies',
    value: ['setuptools_scm', 'piptools', 'setuptools', 'ninja', 'mesonbuild'],
)

option(
    'namespace',
    type: 'array',
    description: '--setup=dev',
    value: ['dist', 'docs', 'lint', 'test'],
    yield: false,
)

option(
    'variables',
    type: 'array',
    description: 'variables to set',
    value: [
        'python',
        'plugin-only',
        'no-version',
        'module-only',
        'source-to-build',
        'docs-source',
        'test-source',
        'dist-exclude-suites',
        'docs-exclude-suites',
        'lint-exclude-suites',
        'test-exclude-suites',
    ],
)

option('unhashable', type: 'array', value: ['source-to-build'])
option('dist-priority', type: 'integer', value: 1)
option('docs-priority', type: 'integer', value: 3)
option('lint-priority', type: 'integer', value: 4)
option('test-priority', type: 'integer', value: 2)
option('dist-timeout-multiplier', type: 'integer', value: 1)
option('docs-timeout-multiplier', type: 'integer', value: 1)
option('lint-timeout-multiplier', type: 'integer', value: 1)
option('test-timeout-multiplier', type: 'integer', value: 4)
option('dist-exclude-suites', type: 'array', value: ['docs', 'lint', 'test'])
option('docs-exclude-suites', type: 'array', value: ['dist', 'lint', 'test'])
option('lint-exclude-suites', type: 'array', value: ['docs', 'dist', 'test'])
option('test-exclude-suites', type: 'array', value: ['dist', 'docs', 'lint'])
option(
    'dist-suite',
    type: 'array',
    description: '--setup=dist',
    value: ['pyc_wheel', 'semantic_release', 'sigstore'],
)
option(
    'docs-suite',
    type: 'array',
    description: '--setup=docs',
    value: [
        'doc8',
        'pydocstyle',
        'sphinx-build',
        'sphinxawesome-codelinter',
        'sphinxawesome-theme',
    ],
)
option(
    'lint-suite',
    type: 'array',
    description: '--setup=lint',
    value: [
        'bandit',
        'black',
        'isort',
        'mypy',
        'pyright',
        'flake8',
        'flake8-quotes',
        'flake8-pytest-style',
        'flake8-type-checking',
        'flake8-annotations',
        'flake8-broken-line',
        'flake8-eradicate',
        'flake8-fixme',
        'flake8-bugbear',
        'flake8-datetimez',
        'flake8-no-pep420',
        'flake8-comprehensions',
        'flake8-leading-blank-lines',
        'flake8-tidy-imports',
        'flake8-pyi',
    ],
)
option(
    'test-suite',
    type: 'array',
    description: '--setup=test',
    value: [
        'coverage',
        'hypothesis',
        'pytest',
        'pytest-asyncio',
        'pytest-cov',
        'pytest-xdist',
        'pytest-tcpclient',
        'pytest-randomly',
    ],
)
option(
    'should-fail',
    type: 'array',
    description: 'tests that return non-zero',
    value: [],
)

option(
    'plugin-only',
    type: 'array',
    description: 'install only - plugins for other utility applications',
    value: [
        'pytest-asyncio',
        'pytest-cov',
        'pytest-xdist',
        'pytest-tcpclient',
        'pytest-randomly',
        'Flake8-pyproject',
        'flake8-quotes',
        'flake8-pytest-style',
        'flake8-type-checking',
        'flake8-annotations',
        'flake8-broken-line',
        'flake8-eradicate',
        'flake8-fixme',
        'flake8-bugbear',
        'flake8-datetimez',
        'flake8-no-pep420',
        'flake8-comprehensions',
        'flake8-leading-blank-lines',
        'flake8-pyi',
        'flake8-tidy-imports',
        'hypothesis',
        'sphinxawesome-codelinter',
        'sphinxawesome-theme',
    ],
)

option(
    'no-version',
    type: 'array',
    description: 'no packaged version metadata',
    value: [
        'pyc_wheel',
        'pytest-asyncio',
        'pytest-tcpclient',
        'pytest-randomly',
        'pytest-xdist',
        'semantic_release',
        'sphinxawesome-codelinter',
        'sphinxawesome-theme',
        'flake8-comprehensions',
    ],
)

option(
    'module-only',
    type: 'array',
    description: 'no application - python module entry point only',
    value: [
        'semantic_release',
        'pyc_wheel',
        'sigstore',
        'sphinxawesome-codelinter',
        'sphinxawesome-theme',
        'Flake8-pyproject',
        'pytest',
        'coverage',
        'flake8',
        'bandit',
        'black',
        'isort',
        'pyright',
        'mypy',
    ],
)
# test application arguments
option('args-sigstore', type: 'array', value: ['--version'], yield: false)
option(
    'args-semantic_release',
    type: 'array',
    value: ['version', '--print'],
    yield: false,
)

option('args-pyc_wheel', type: 'array', value: ['-h'], yield: false)

option(
    'args-doc8',
    type: 'array',
    value: ['--config', 'pyproject.toml', '@docs_source@'],
    yield: false,
)

option(
    'args-pydocstyle',
    type: 'array',
    value: ['-v', '-d', '--config=pyproject.toml', '@docs_source@'],
    yield: false,
)

option('args-sphinx-build', type: 'array', value: ['--version'], yield: false)
option('args-mypy', type: 'array', value: ['@build_root@'])
option(
   'args-bandit',
   description: 'application',
   type: 'array',
   value: [
      '--configfile', 'pyproject.toml',
      '--ignore-nosec',
      '-r', '@build_root@'
   ]
)
option(
    'args-black',
    type: 'array',
    value: [
        '-S',
        '--verbose',
        '--check',
        '--diff',
        '--no-color',
        '@build_root@',
    ],
    yield: false,
)
option(
    'args-isort',
    type: 'array',
    value: [
        '-c',
        '--skip-glob',
        '*.pyi',
        '--extend-skip',
        'meson-private/pycompile.py',
        '@build_root@',
    ],
    yield: false,
)
option('args-pylint', type: 'array', value: ['@project_name@'], yield: false)
option(
   'args-pyright',
   type: 'array', 
   value: [
      '--stats',
      '--warnings',
      '--verbose',
      '@build_root@',
   ],
   yield: false
)
option('args-coverage', type: 'array', value: ['debug', 'config'], yield: false)
option(
    'args-restructuredtext-lint',
    type: 'array',
    value: ['--level=debug', '@project_name@'],
    yield: false,
)
option(
    'args-flake8',
    type: 'array',
    value: [
        '--toml-config=pyproject.toml',
        '--benchmark',
        '--statistics',
        '--max-complexity',
        '6',
        '--show-source',
        '@build_root@/',
    ],
    yield: false,
)
option('args-Flake8-pyproject', type: 'array', value: [], yield: false)
option(
    'args-pytest',
    type: 'array',
    value: [
        '--cov=ozi',
        '-q',
        '--basetemp=temp',
        '-n',
        'auto',
        '-d',
        '--exitfirst',
        '--cov-config=pyproject.toml' 
    ],
    yield: false,
)
option('emoji-metadata-version', type: 'string', value: 'üì¶')
option('emoji-no-version', type: 'string', value: 'üì°')
option('emoji-directory', type: 'string', value: 'üìÅ')
option('emoji-generic', type: 'string', value: '„ÄΩÔ∏è')
option('emoji-setup', type: 'string', value: 'üß™')
option('emoji-docs', type: 'string', value: 'üìù')
option('emoji-dist', type: 'string', value: 'üöÄ')
option('emoji-lint', type: 'string', value: 'üö®')
option('emoji-test', type: 'string', value: '‚úÖ')