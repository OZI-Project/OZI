{#- OZI 0.1
# ozi/templates/project.meson.build
# Part of the OZI Project, under the Apache License v2.0 with LLVM Exceptions.
# See LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
-#}
project(
    '{{ project.name }}',
    default_options: ['warning_level=3'],
    license: '{{ project.license_expression }}',
    license_files: ['{{ project.license_file }}'],
    meson_version: '{{ spec.python.build.requires.meson|replace('meson', '') }}',
    version: run_command(
        'python3',
        [
            '-c',
            'from setuptools_scm import get_version;print(get_version(normalize=False))',
        ],
        check: true,
    ).stdout().strip(),
)
env = environment()
source_root = meson.current_source_dir()
build_root = meson.current_build_dir()
fs = import('fs')
pymod = import('python')
project_name = meson.project_name()
build_dir = fs.stem(build_root)
source_to_build = configuration_data()
docs_source = 'subprojects/docs'
test_source = 'tests'
pip_compile = find_program('pip-compile', required: true)
requirements = ['requirements.in']
custom_target(
    'requirements-{{ project.name }}',
    input: requirements,
    output: 'requirements.txt',
    build_always_stale: true,
    build_by_default: true,
    command: [
        'pip-compile',
        '--allow-unsafe',
        '--strip-extras',
        '-q',
        '--generate-hashes',
        '-o',
        '@OUTPUT@',
        '@INPUT@'
    ]
)
dev = subproject('ozi')
foreach var : get_option('variables')
    name = var.replace('-', '_')
    set_variable(name, dev.get_variable(name))
endforeach
python = pymod.find_installation()

{#- BEGIN config MESON_BUILD_ROOT/pyproject.toml #}
pkg_info_req = 'Requires-Dist: @0@'
required = []
foreach requirement : fs.read('requirements.in').split('\n')
    if requirement != '' and not requirement.startswith('#')
        required += pkg_info_req.format(requirement)
    endif
endforeach
pyproject_config.set(
    'PYTHON_VERSION_DIST',
    'py'+''.join(python.language_version().split('.'))
)
pyproject_config.set('SCM_VERSION', meson.project_version())
pyproject_config.set('VCS_TAG', '@VCS_TAG@')
pyproject_config.set('PROJECT_NAME', project_name)
pyproject_config.set('README_TEXT', fs.read('README.rst'))
pyproject_config.set('REQUIREMENTS_IN', '\n'.join(required))
pyproject_config.set('LICENSE', meson.project_license()[0])
configure_file(
    input: 'pyproject.toml',
    output: 'pyproject.toml',
    configuration: pyproject_config
)
run_command(python, ['-c', replace_ruff_target_version], check: true)
{#- END config MESON_BUILD_ROOT/pyproject.toml #}

{#- BEGIN config MESON_SOURCE_ROOT/PKG-INFO #}
configure_file(command: [python, '-c', meson_setuptools_scm], output: 'PKG-INFO')
meson.add_dist_script(pip, 'install', 'tomli>=2.0.0')
meson.add_dist_script(python, '-c', meson_dist_setuptools_scm)
vcs_tag(input: 'pyproject.toml', output: 'pyproject.toml')
{#- END config MESON_SOURCE_ROOT/PKG-INFO #}
root_files = [
{%- for required_root_dist in spec.python.pkg.required.root %}
{%- if required_root_dist not in ['pyproject.toml'] %}
    '{{ required_root_dist }}',
{%- endif %}
{%- endfor %}
{%- for filename in spec.python.pkg.required.root %}
{%- if project.license_file not in ozi.required_root_dist %}
    '{{ project.license_file }}',
{%- endif %}
{%- endfor %}
]
foreach source : root_files
    fs.copyfile(source)
endforeach
run_command(python, ['-c', sync_pkg_readme], check: true)
if false
    executable('root_files', root_files)
endif
root_children = [
    '{{ project.name|underscorify }}',
    'tests',
]
foreach child: root_children
    subdir(child)
endforeach
if false
    executable('root_children', root_children)
endif
