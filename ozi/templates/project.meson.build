{#- OZI 0.1
# ozi/templates/project.meson.build
# Part of the OZI Project, under the Apache License v2.0 with LLVM Exceptions.
# See LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
-#}
project(
    '{{ project.name }}',
    default_options: ['warning_level=3'],
    license: '{{ project.license_expression }}',
    license_files: ['{{ project.license_file }}'],
    meson_version: '>=1.1.0',
    version: run_command(
        'python3',
        [
            '-c',
            'from setuptools_scm import get_version;print(get_version(normalize=False))',
        ],
        check: true,
    ).stdout().strip(),
)
env = environment()
source_root = meson.current_source_dir()
build_root = meson.current_build_dir()
fs = import('fs')
pymod = import('python')
project_name = get_option('project-name').auto() ? meson.project_name() : 'todo'
build_dir = get_option('build-dir').auto() ? fs.stem(build_root) : 'todo'
source_to_build = (
    get_option('source-to-build').auto() ? configuration_data() : 'todo'
)
docs_source = get_option('docs-source').auto() ? 'subprojects/docs' : 'todo'
test_source = get_option('test-source').auto() ? 'tests' : 'todo'
dev = subproject('ozi')
foreach var : get_option('variables')
    name = var.replace('-', '_')
    set_variable(name, dev.get_variable(name))
endforeach
scm_version = run_command(
    python,
    ['-c', scm_version_snip],
    check: true,
).stdout().strip()
semantic_version = meson.project_version().split('.')
maj_version = semantic_version.get(0)
min_version = semantic_version.get(1)
pat_version = semantic_version.get(2)
configure_file(
    input: 'pyproject.toml',
    output: 'pyproject.toml',
    configuration: configuration_data(
        {
            'PROJECT_NAME': project_name,
            'MESON_DIST_FALLBACK_VERSION': '.'.join(
                maj_version,
                min_version,
                pat_version,
            ),
        },
    ),
)
root_files = ['README.rst', 'CHANGELOG.md', '{{ project.license_file }}', 'NOTICE']
foreach source : root_files
    fs.copyfile(source)
endforeach
if false
    executable('root_files', root_files)
endif
children = [project_name, test_source]
foreach child: children
    subdir(child)
endforeach
if false
    executable('root_children', children)
endif
if get_option('dev').enabled()
    add_test_setup('dev', is_default: true, env: env)
    env.append('TESTS_BUILDDIR', build_root)
    env.append('PYTHONPATH'    , build_root)
    pip = find_program('pip', required: false, disabler: true)
    no_check = {'check': false, 'env': env}
    opt_cov_eq_project_name = '--cov='+project_name
    build_commands = {'dev': []}
    foreach name: namespace
        add_test_setup(name, exclude_suites: get_variable(name+'_exclude_suites'))
        set_variable(name, get_option(name).enable_auto_if(get_option('dev').enabled()))
        set_variable(name+'_kwargs', {'suite': name, 'env': env})
        command_names = dev.get_variable(name+'_suite')
        foreach command: command_names
            _args = get_option('args-'+command)
            command_args = []
            test_app_args = {}
            foreach arg : _args
                if arg.startswith('@') and arg.endswith('@')
                    arg = arg.strip('@')
                    arg = is_variable(arg)? get_variable(arg) : arg
                endif
                command_args += arg
            endforeach
        if command not in plugin_only
            foreach app, args : {command: command_args}
                args = {
                    'args': args,
                    'env': env,
                    'priority': get_option(name+'-priority'),
                    'suite': name
                }
                if app in should_fail
                    args += {'should_fail': true}
                endif
            feature = get_variable(args['suite'])
            test_app = feature.enabled()? dev.get_variable(app.replace('-', '_')): disabler()
            test_app.found() and feature.enabled()? test(app, test_app, kwargs: args): false
            endforeach
        endif
        endforeach
    endforeach
endif