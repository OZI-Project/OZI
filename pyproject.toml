# pyproject.toml
# Part of the OZI Project, under the Apache License v2.0 with LLVM Exceptions.
# See LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
[build-system]
build-backend = "mesonpep517.buildapi"
requires      = [
    "mesonpep517>=0.2",
    "meson[ninja]>=1.1.0",
    "pip-tools>=7",
    "setuptools>=64",
    "setuptools_scm>=8.0",
    'tomli>=2.0.0;python_version<"3.11"',
]

[tool.mesonpep517.entry-points]
console_scripts = [
    "ozi = ozi.__main__:main",
    "ozi-new = ozi.new.__main__:main",
    "ozi-fix = ozi.fix.__main__:main",
]

[tool.mesonpep517.metadata]
pkg-info-file = 'build/PKG-INFO'
summary = 'Packager for Python projects using Meson.'

[tool.cibuildwheel]
build-frontend = "build"
before-build = [
     "pip install --upgrade pip",
     "pip install --upgrade build",
     "pip install --upgrade pyc_wheel",
     "pip install --upgrade sigstore",
     "pip install --upgrade meson[ninja]>=1.1.0",
     "pip install --upgrade mesonpep517",
     "pip install --upgrade setuptools_scm",
     "pip install --upgrade pip-tools",
     "meson setup build",
]

[tool.setuptools_scm]
version_file_template = """
Metadata-Version: 2.1
Name: @PROJECT_NAME@
Version: @SCM_VERSION@
Summary: Packager for Python projects using Meson.
Download-URL: https://github.com/rjdbcm/OZI/archive/refs/tags/@SCM_VERSION@.tar.gz
Home-page: https://oziproject.dev/
Author: Ross J. Duff MSc
Author-email: help@oziproject.dev
License: @LICENSE@
Keywords: meson,packaging,wheel
Project-URL: Bug Tracker, https://github.com/rjdbcm/ozi/issues
@REQUIREMENTS_IN@
Requires-External: git
Requires-Python: >=3.10, <3.13
Classifier: Development Status :: 2 - Pre-Alpha
Classifier: Environment :: Console
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Natural Language :: English
Classifier: Operating System :: MacOS :: MacOS X
Classifier: Operating System :: POSIX :: Linux
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Topic :: Software Development :: Build Tools
Classifier: Topic :: Software Development :: Quality Assurance
Classifier: Typing :: Typed
Description-Content-Type: text/x-rst

@README_TEXT@
"""
version_file = "PKG-INFO"
# meson writes during configuration so that meson dist can have a valid version.
fallback_version = "@VCS_TAG@"
parentdir_prefix_version = "OZI-"
tag_regex = "^(?P<prefix>v)?(?P<version>[^\\+]+)(?P<suffix>.*)?$"

[tool.setuptools.dynamic]
dependencies = { file = ["requirements.in"] }

[project]
dynamic = ["dependencies", "version"]
license = {file = "LICENSE.txt"}
readme = "README.rst"
requires-python = ">=3.10, <3.13"

[project.optional_dependencies] # also meson test suite names
# continuous integration
ci   = ["tox>4", "tox-gh>1.2"]
# tox -e fix
fix  = ["black", "ruff>=0.1.6", "autoflake", "isort"]
# Default meson test setup
dev  = ["[dist,lint,test]"]
## Packaging Setup
dist = ["pyc_wheel", "python-semantic-release", "sigstore"]
## Documentation Setup
docs = ["doc8", "pydocstyle[toml]", "Pygments", "pyparsing", "sphinx",
        "sphinx-design", "sphinxawesome-codelinter", "sphinxawesome-theme ~= 5.0.0b2"]
## Linting and Formatting Setup
lint = ["bandit[toml]", "black", "flake8", "flake8-quotes",
        "flake8-pytest-style", "flake8-type-checking", "flake8-annotations",
        "flake8-broken-line", "flake8-eradicate", "flake8-fixme", "flake8-bugbear",
        "flake8-datetimez", "flake8-no-pep420", "flake8-comprehensions",
        "flake8-leading-blank-lines", "flake8-tidy-imports", "flake8-pyi",
        "Flake8-pyproject", "isort", "mypy", "pyright"]
## Testing Setup
test = ["coverage[toml]", "hypothesis[all]", "pytest", "pytest-asyncio", "pytest-cov", 
        "pytest-tcpclient", "pytest-randomly", "pytest-xdist"]

[tool.bandit]
exclude_dirs = ["venv", "meson-private", "tests"]
format = "txt"
ignore_nosec = true
verbose = true

[tool.black]
extend-exclude = "(\\.pyi|meson-private|venv)"
line-length = 93

[tool.coverage.report]
exclude_lines = [
    "^.*#\\s*(pragma|PRAGMA)[:\\s]?\\s*(no|NO)\\s*(cover|COVER)",
    "^.*#\\s*(pragma|PRAGMA)[:\\s]?\\s*(defer|DEFER)\\s*(to|TO)\\s*[a-zA-Z0-9_]*",
    "def __repr__",
    "def __wrapper", # functools.wraps decorated functions
    "(\\.\\.\\.)",
    "@(abc\\.)?abstractmethod",
    "class .*\\bProtocol\\):",
    "if __name__ == .__main__.:",
    "if (typing\\.)?TYPE_CHECKING:",
    "(el)?if\\s?(sys\\.)?version_info\\s?(==|<=|>=|<|>)\\s?\\([234],\\s?[0-9]{1,3}\\)\\s?:",
    ]
fail_under = 100.0
show_missing = true
skip_covered = true
skip_empty = true

[tool.coverage.run]
branch = true
relative_files = true
omit = [
    "*/vendor/*",
]

[tool.ruff]
line-length = 93
extend-exclude = ["meson-private", "scripts", "vendor"]
select = ["ALL"]
ignore = [
    "A003",
    "ARG",
    "ANN401",
    "TRY003",
    "B028",
    "B905",
    "D1",
    "D2",
    "D101",
    "D4",
    "FLY",
    "FBT",
    "PGH003",
    "PLR",
    "RET",
    "EM",
    "PLW",
    "PTH",
    "RUF009",
    "RUF012",
    "RUF015",
    "SIM",
    "T201",
    "TCH002",
    "TCH004",
    "UP",
    "PERF203",
]
# target-version = "@PYTHON_VERSION_DIST@"

[tool.ruff.lint.mccabe]
max-complexity = 6

[tool.ruff.format]
line-ending = "lf"
quote-style = "single"

[tool.ruff.isort]
force-single-line = true

[tool.ruff.lint.pycodestyle]
max-line-length = 102

[tool.ruff.lint.flake8-copyright]
author="Ross J. Duff MSc"

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"

[tool.ruff.lint.flake8-type-checking]
strict = true

[tool.flake8]
ban-relative-imports = "parents"
max-line-length = 93
extend-exclude = ["meson-private", "build-env-*", "vendor", "venv", "build*", "*.pyi"]
extend-ignore = "E203,E501,TC007,TC008"
extend-select = "B950"

[tool.isort]
line_length = 93
profile = "black"
force_single_line = true

[tool.mypy]
implicit_reexport = true
strict = true
exclude = [
    'meson-private',
    'tests',
    'venv',
]

[[tool.mypy.overrides]]
module = ["ozi.vendor.*"]
ignore_errors = true

[[tool.mypy.overrides]]
module = ["spdx_license_list.*"]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["mesonbuild.*"]
ignore_missing_imports = true

[tool.pylint.MASTER]
disable = "C0301"
expected-line-ending-format = "LF"
max-line-length = 93
max-nested-blocks = 4

[tool.pyright]
reportMissingTypeStubs = false
exclude = [ 
    'meson-private',
    'tests',
    'venv',
    '*/vendor/',
]

[tool.pytest.ini_options]  #[tool.pytest] # This will be used by pytest in the future
filterwarnings      = [
"error",
"ignore:The --rsyncdir command line argument and rsyncdirs config variable are deprecated.:DeprecationWarning",
]
asyncio_mode = "auto"
log_cli = true
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s (%(filename)s:%(lineno)s)"
log_cli_level = "INFO"

[tool.semantic_release]
commit_parser = "emoji"
major_on_zero = false
tag_format = "{version}"

[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease_token = "beta"
prerelease = false

[tool.semantic_release.commit_parser_options]
major_tags = [":boom:"]
minor_tags = [
    ":sparkles:",
]
patch_tags = [
    ":adhesive_bandage:",
    ":alembic:",
    ":alien:",
    ":ambulance:",
    ":apple:",
    ":arrow_down:",
    ":arrow_up:",
    ":bento:",
    ":bug:",
    ":bulb:",
    ":card_file_box:",
    ":chart_with_upwards_trend:",
    ":checkered_flag:",
    ":children_crossing:",
    ":dizzy:",
    ":egg:",
    ":fire:",
    ":globe_with_meridians:",
    ":goal_net:",
    ":green_apple:",
    ":green_heart:",
    ":hammer:",
    ":heavy_minus_sign:",
    ":heavy_plus_sign:",
    ":iphone:",
    ":label:",
    ":lipstick:",
    ":lock:",
    ":mag:",
    ":necktie:",
    ":package:",
    ":passport_control:",
    ":pencil2:",
    ":penguin:",
    ":pushpin:",
    ":recycle:",
    ":rewind:",
    ":robot:",
    ":speech_balloon:",
    ":triangular_flag_on_post:",
    ":wastebasket:",
    ":wheelchair:",
    ":wrench:",
    ":zap:",
]

[tool.semantic_release.changelog]
changelog_file = "CHANGELOG.md"

[tool.semantic_release.remote]
token = { env = "GH_TOKEN" }

[tool.semantic_release.publish]
dist_glob_patterns = ["*.whl", "*.tar.gz", "sig/*"]
upload_to_vcs_release = true

[tool.tox]
legacy_tox_ini = """
[tox]
skipsdist = True
envlist = py3{10,11,12}

[gh]
python =
     3.12 = py312
     3.11 = py311
     3.10 = py310

[testenv:dist]
description = OZI distribution checkpoint
allowlist_externals = rm
package = wheel
deps =
     meson >= 1.1.0
     ninja >= 1.8.2
     pip-tools
     setuptools_scm[toml]
     tomli >= 2.0.0
    -r requirements.in
commands =
     meson setup {env_tmp_dir} -Ddist=enabled
     meson compile -C {env_tmp_dir}
     rm -rf {env_tmp_dir}/.gitignore
     meson test --no-rebuild --maxfail=1 -C {env_tmp_dir} --setup=dist

[testenv:lint]
description = OZI source formatting and linting checkpoint
allowlist_externals = rm
package = wheel
deps =
     meson >= 1.1.0
     ninja >= 1.8.2
     pip-tools
     setuptools_scm[toml]
     tomli >= 2.0.0
     -r requirements.in
commands =
     meson setup {env_tmp_dir} -Dlint=enabled
     meson compile -C {env_tmp_dir}
     rm -rf {env_tmp_dir}/.gitignore
     meson test --no-rebuild --maxfail=1 -C {env_tmp_dir} --setup=lint

[testenv:test]
description = OZI unit tests checkpoint
allowlist_externals = rm
package = wheel
deps =
     meson >= 1.1.0
     ninja >= 1.8.2
     pip-tools
     setuptools_scm[toml]
     tomli >= 2.0.0
     -r requirements.in
commands =
     meson setup {env_tmp_dir} -Dtest=enabled
     meson compile -C {env_tmp_dir}
     rm -rf {env_tmp_dir}/.gitignore
     meson test --no-rebuild --maxfail=1 -C {env_tmp_dir} --setup=test

[testenv:fix]
description = OZI project fix issues utility; runs black, isort, autoflake, and ruff
deps = 
     black
     isort
     autoflake
     ruff
skip_install = true
commands =
     black -v -S .
     isort .
     autoflake -i -vv -r .
     ruff check ozi --fix

[testenv:ls]
description = OZI list all SCM tracked files.
deps =
     setuptools_scm[toml]>=8
commands =
     {env_python} -m setuptools_scm ls

"""
# -Dblastpipe:dev=enabled -Dozi-blastpipe=enabled